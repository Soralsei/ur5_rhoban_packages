#!/usr/bin/env python

import rospy
import numpy as np
import xml.dom.minidom

from trajectory_msgs.msg import JointTrajectory, JointTrajectoryPoint
from controller_manager_msgs.utils import ControllerLister

HOME = {
    'elbow_joint' : np.pi / 2,
    'shoulder_lift_joint' : -np.pi / 2,
    'shoulder_pan_joint' : np.pi,
    'wrist_1_joint' : -np.pi / 2,
    'wrist_2_joint' : -np.pi / 2,
    'wrist_3_joint' : 0.0
}

def get_joint_limits(key='robot_description', use_smallest_joint_limits=True):
    use_small = use_smallest_joint_limits
    use_mimic = True

    # Code inspired on the joint_state_publisher package by David Lu!!!
    # https://github.com/ros/robot_model/blob/indigo-devel/
    # joint_state_publisher/joint_state_publisher/joint_state_publisher
    description = rospy.get_param(key)
    robot = xml.dom.minidom.parseString(description)\
        .getElementsByTagName('robot')[0]
    free_joints = {}
    dependent_joints = {}

    # Find all non-fixed joints
    for child in robot.childNodes:
        if child.nodeType is child.TEXT_NODE:
            continue
        if child.localName == 'joint':
            jtype = child.getAttribute('type')
            if jtype == 'fixed':
                continue
            name = child.getAttribute('name')
            try:
                limit = child.getElementsByTagName('limit')[0]
            except:
                continue
            if jtype == 'continuous':
                minval = -np.pi
                maxval = np.pi
            else:
                try:
                    minval = float(limit.getAttribute('lower'))
                    maxval = float(limit.getAttribute('upper'))
                except:
                    continue
            try:
                maxvel = float(limit.getAttribute('velocity'))
            except:
                continue
            safety_tags = child.getElementsByTagName('safety_controller')
            if use_small and len(safety_tags) == 1:
                tag = safety_tags[0]
                if tag.hasAttribute('soft_lower_limit'):
                    minval = max(minval,
                                 float(tag.getAttribute('soft_lower_limit')))
                if tag.hasAttribute('soft_upper_limit'):
                    maxval = min(maxval,
                                 float(tag.getAttribute('soft_upper_limit')))

            mimic_tags = child.getElementsByTagName('mimic')
            if use_mimic and len(mimic_tags) == 1:
                tag = mimic_tags[0]
                entry = {'parent': tag.getAttribute('joint')}
                if tag.hasAttribute('multiplier'):
                    entry['factor'] = float(tag.getAttribute('multiplier'))
                if tag.hasAttribute('offset'):
                    entry['offset'] = float(tag.getAttribute('offset'))

                dependent_joints[name] = entry
                continue

            if name in dependent_joints:
                continue

            joint = {'min_position': minval, 'max_position': maxval}
            joint["has_position_limits"] = jtype != 'continuous'
            joint['max_velocity'] = maxvel
            free_joints[name] = joint
    return free_joints

if __name__ == '__main__':
    import sys
    rospy.init_node('home_ur', sys.argv)
    topic = rospy.get_param('~topic', '/pos_joint_traj_controller/command')
    prefix = rospy.get_param('~prefix', '')
    client = rospy.Publisher(topic, JointTrajectory, queue_size=1, latch=True)
    
    robot_limits = get_joint_limits()
    
    traj = JointTrajectory()
    traj.joint_names = [prefix + key for key in HOME.keys()]
    rospy.sleep(0.5)
    time = rospy.Time.now()
    traj.header.stamp = time
    point = JointTrajectoryPoint()
    dur = []
    
    for name in traj.joint_names:
        cmd = HOME.get(name[len(prefix):], 0.0)
        max_vel = robot_limits[name]['max_velocity']
        dur.append(max(cmd / max_vel, 0.5))
        point.positions.append(cmd)
        
    point.time_from_start = rospy.Duration(max(dur))
    traj.points.append(point)
    
    rospy.loginfo(f'Publishing home command to topic "{topic}", joint names prefixed with "{prefix}"')
    client.publish(traj)
    